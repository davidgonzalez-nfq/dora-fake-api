name: CI/CD (deploy)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      fail:
        description: "Forzar fallo del deployment"
        required: false
        default: "false"

permissions:
  contents: write
  deployments: write

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest -q

      - name: Create GitHub Deployment
        id: create_deploy
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHA="${{ github.sha }}"
          ENVIRONMENT="production"
          # Crear deployment
          resp=$(curl -s -X POST             -H "Authorization: Bearer $GH_TOKEN"             -H "Accept: application/vnd.github+json"             https://api.github.com/repos/${{ github.repository }}/deployments             -d "{"ref":"$SHA","environment":"$ENVIRONMENT","auto_merge":false,"required_contexts":[]}")
          echo "$resp" | tee deploy.json
          echo "deploy_id=$(jq -r '.id' deploy.json)" >> $GITHUB_OUTPUT

      - name: Simulate deploy (success/failure)
        id: simulate
        run: |
          should_fail="${{ github.event.inputs.fail || 'false' }}"
          # Si el mensaje contiene [fail] o la PR/commit tiene etiqueta deploy-fail, fallamos
          msg="$(git log -1 --pretty=%B)"
          echo "Commit message: $msg"
          if echo "$msg" | grep -qi "\[fail\]"; then should_fail="true"; fi
          echo "should_fail=$should_fail" >> $GITHUB_OUTPUT
          if [ "$should_fail" = "true" ]; then
            echo "Forzando fallo de despliegue"
            echo "::warning::Marcando deployment como failure"
          else
            echo "Despliegue OK"
          fi

      - name: Set Deployment Status
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS="success"
          if [ "${{ steps.simulate.outputs.should_fail }}" = "true" ]; then STATUS="failure"; fi
          curl -s -X POST             -H "Authorization: Bearer $GH_TOKEN"             -H "Accept: application/vnd.github+json"             https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create_deploy.outputs.deploy_id }}/statuses             -d "{"state":"$STATUS","environment":"production"}" | jq -r '.state'
